using Autofac;
using Hub.BackgroundJob.Main.IntegrationEvents.Events;
using Hub.EventBus;
using Hub.EventBus.Abstractions;
using Hub.EventBus.Main.IntegrationEvents.EventHandling;
using Hub.EventBusRabbitMQ;
using Hub.EventBusRabbitMQ.Abstractions;
using Hub.Framework.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RabbitMQ.Client;

namespace Hub.BackgroundJob.Main
{
    public partial  class Startup
    {/// <summary>
     /// Register the Swagger generator, defining one or more Swagger documents
     /// </summary>
     /// <param name="services">The services.</param>
        public void RegisterEventBus(IServiceCollection services)
        {
            var eventBusConfiguration = new EventBusConfiguration();
            Configuration.Bind("EventBus", eventBusConfiguration);
            if (eventBusConfiguration.EventBusRetryCount < 0) eventBusConfiguration.EventBusRetryCount = 5;

            services.AddSingleton<IRabbitMQPersistentConnection>(sp =>
            {
                var logger = sp.GetRequiredService<ILogger<DefaultRabbitMQPersistentConnection>>();
                var factory = new ConnectionFactory()
                {
                    HostName = eventBusConfiguration.EventBusConnection,
                    DispatchConsumersAsync = true
                };

                return new DefaultRabbitMQPersistentConnection(factory, logger, eventBusConfiguration.EventBusRetryCount);
            });


            services.AddSingleton<IEventBus, EventBusRabbitMQ.EventBusRabbitMQ>(sp =>
            {
                var rabbitMQPersistentConnection = sp.GetRequiredService<IRabbitMQPersistentConnection>();
                var iLifetimeScope = sp.GetRequiredService<ILifetimeScope>();
                var logger = sp.GetRequiredService<ILogger<EventBusRabbitMQ.EventBusRabbitMQ>>();
                var eventBusSubcriptionsManager = sp.GetRequiredService<IEventBusSubscriptionsManager>();

                return new EventBusRabbitMQ.EventBusRabbitMQ(rabbitMQPersistentConnection, logger, iLifetimeScope, eventBusSubcriptionsManager, eventBusConfiguration.BrokerName, eventBusConfiguration.SubscriptionClientName, eventBusConfiguration.EventBusRetryCount);
            });


        }
        /// <summary>
        /// Uses the swagger.
        /// </summary>
        /// <param name="app">The application.</param>
        /// <param name="env">The env.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for UseSwagger
        public void ConfigureEventBus(IApplicationBuilder app)
        {
            var eventBus = app.ApplicationServices.GetRequiredService<IEventBus>();
            //Với trường hợp chỉ gửi
            eventBus.InitPublish<OrdersIntegrationEvent, OrdersIntegrationEventHandler>();

            //Trường hợp trong 1 ứng dụng vừa gửi vừa nhận xử lý
            //eventBus.Subscribe<TB_TestIntegrationEvent, TB_TestIntegrationEventHandler>();

        }
    }
}
